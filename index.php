<!DOCTYPE html>
<html>
    
    <head>
        <meta charset="utf-8">
        <!--Begin Style-->
        <link rel="stylesheet" href="style.css"/>
        <!--End Style-->
        <title>Compos.In</title>        
    </head>
    
    <body>
        <!--Side menu-->
        <nav id="side-menu">   
            <div id="logo">
                Compos.In
            </div>
            <div class="side-menu-but" onclick="openFile()">Open...</div>
            <input type="file" id="files" accept=".xml" />
            <!--<input type="text"></input>-->
        </nav>
        
        <!--General Content - Generated by PHP-->
        <section id="general-content">
            <!--<nav id="score-menu"></nav>-->
            <div id="score-page">
                <!--<object id="svgPage" type="image/svg+xml" data="debug.svg" height="3700" width="1520">Error</object>-->
                <svg id="svgContainer" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1520" height="10000"></svg>
            </div>
        </section>
        <script src="score/g-query.js"></script>
        <script src="score/ScoreConverter.js"></script>
        <script src="ariajs/List.js"></script>
        <script src="score/ScoreLoader.js"></script>
        <script src="score/ScoreElements.js"></script>
        <!--<script src="score/ScoreBuilder/TabChord.js"></script>-->
        <script src="score/ScoreBuilder/Chord.js"></script>
        <script src="score/ScoreBuilder/Measure.js"></script>
        <script src="score/ScoreBuilder/MeasureGroup.js"></script>
        <script src="score/ScoreBuilder/ScorePart.js"></script>
        <script src="score/ScoreBuilder/ScoreGroup.js"></script>
        <script src="score/ScoreBuilder/Score.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
        <script src="xml2json/xml2json.js"></script>
        <script src="bluemusic.js"></script>
        <script>

            var svgContainer = document.getElementById("svgContainer"),
                scoreObj = null;

            window.onload = function() {

                var chord1 = {
                    denominator: 2,
                    notes: [
                        { n: "B", o: 4 },
                        { n: "A", o: 4 },
                        { n: "G", o: 4 },
                        { n: "F", o: 4 },
                        { n: "D", o: 4 }
                    ]
                }
                
                var chord2 = {
                    denominator: 4,
                    notes: [
                        { n: "C", o: 4 },
                        { n: "D", o: 4 },
                        { n: "E", o: 4 },
                        { n: "F", o: 4 },
                        { n: "G", o: 4 }
                    ]
                }

                var chord3 = {
                    denominator: 2,
                    notes: [
                        {n: "E", o: 3, a: "flat-flat"  },
                        {n: "F", o: 3, a: "flat-flat"  }
                    ]
                }

                var chord4 = {
                    denominator: 2,
                    notes: [
                        {n: "E", o: 3 , a: "flat-flat"}
                    ]
                }

                var chord5 = {
                    denominator: 2,
                    dotted: 1,
                    notes: [
                        {n: "E", o: 3, a: "" },
                        {n: "F", o: 3, a: "flat-flat" },
                        {n: "F", o: 5, a: "" }
                    ]
                }

                var chord6 = {
                    denominator: 8,
                    notes: [
                        {n: "C", o: 4 }
                    ]
                }

                var chord7 = {
                    denominator: 4,
                    dotted: 1,
                    notes: [
                        {n: "E", o: 3, a: "flat-flat"  },
                        {n: "F", o: 3, a: "flat-flat"  }
                    ]
                }


                var measure1 = {
                    clef: "G2",
                    timeSig: "4,4",
                    keySig: 2,
                    endBar: "simple",
                    chords: [chord1, { denominator: 2 }]
                }

                var measure2 = {
                    //keySig: 5,
                    clef: "F4",
                    endBar: "simple",
                    chords: [ chord2, { denominator: 4 }, { denominator: 4 }, { denominator: 4 }, ]
                }

                var measure3 = {
                    clef: "F4",
                    timeSig: "4,4",
                    keySig: 5,
                    chords: [{ denominator: 4 }, chord3, { denominator: 4 }]
                }

                var betaDen = 8;
                var betaChords = []
                for(var a = 0; a < betaDen; a++) {
                    betaChords.push({ denominator: betaDen , notes: [{ n:"G", o: 2 }]});   
                }

                var measure4 = {
                    chords: betaChords/*[ 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen },
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }, 
                        { denominator: betaDen }
                     ]*/
                }

                var measure5 = {
                    clef: "C3",
                    timeSig: "4,4",
                    keySig: 5,
                    chords: [chord5, chord6, chord7]
                }

                var measure6 = {
                    chords: [{ denominator: 2 }, { denominator: 2 }]
                }

                var scorePart1 = {
                    measures: [
                        measure1,
                        measure2
                    ]
                }

                var scorePart2 = {
                    measures: [
                        measure3,
                        measure4
                    ]
                }

                var scorePart3 = {
                    measures: [
                        measure5,
                        measure6
                    ]
                }

                var newMJson = {
                    title: "My Music",
                    composer: "compos.in",
                    lyricist: "lyrics",
                    tempo: [8, 120],
                    scoreParts: [ scorePart1, scorePart2, scorePart3]
                }


                var newMusicScore = BlueMusic.GetScore.FromMJSON(newMJson);
                newMusicScore.Organize();

                svgContainer.appendChild(newMusicScore.Draw());
            }




//-------------------------- OUTTER FILE OPENING -----------------------------------
            function OpenScoreDOM(scoreDOM) {
                if(scoreObj && scoreObj.parentElement)
                    scoreObj.parentElement.removeChild(scoreObj);
                    


                scoreObj = scoreDOM;
                scoreObj.Organize();

                svgContainer.appendChild(scoreDOM.Draw());    
            }



            function OpenScore(jsonStr) {
                //var composinObj = toComposinFormat(JSON.parse(jsonStr));

                //console.log(JSON.parse(jsonStr));
                //console.log(composinObj);

                if(scoreObj)
                    svgContainer.removeChild(scoreObj.Draw());
                    
                //scoreObj = ScoreLoader.Open(composinObj);
                scoreObj = ScoreLoader.Open(jsonStr);

                svgContainer.appendChild(scoreObj.Draw());
                
                scoreObj.Organize(1500, 300);
                scoreObj.MoveTo(15.5, 0.5);
            }

            //FILE OPEN STUFF
            var fileOpenBut = document.getElementById('files');
            fileOpenBut.addEventListener('change', handleFileSelect, false);

            function openFile() {
                fileOpenBut.click();
            }

            function handleFileSelect(evt) {
                var file = evt.target.files[0]; // FileList object
                if(!file)
                    return;

                fileOpenBut.value = ""; //clear file value to be able to open the same file if needed

                var reader = new FileReader();

                reader.onloadend = function() {
                    if(reader.readyState == 2) {
                        //var xmlobj = parseXml(reader.result);
                        //console.log(xmlobj.documentElement.getElementsByTagName("measure"));    

                        var scoreDOM = BlueMusic.GetScore.FromMusicXML(reader.result);

                        OpenScoreDOM(scoreDOM);

                        //var jsonstr = xml2json(xmlobj);
                        //console.log(jsonstr);
                        //console.log(JSON.parse(jsonstr.replace("undefined", "")));
                        
                        //postFile(replaceCreator(reader.result));
                        //console.log(replaceCreator(reader.result));
                    }
                }

                reader.readAsText(file);
            }



            //function to replace the creator from music xml to easily find composer and lyricist
            function replaceCreator(xmlString) {
                //return xmlString;

                var changeArray = [];
                    composerIndex = xmlString.indexOf("<creator type=\"composer\">"),
                    poetIndex = xmlString.indexOf("<creator type=\"poet\">"),
                    lyricistIndex = xmlString.indexOf("<creator type=\"lyricist\">"),
                    artistIndex = xmlString.indexOf("<creator type=\"artist\">"),
                    tabberIndex = xmlString.indexOf("<creator type=\"tabber\">");

                if(composerIndex > -1)
                    changeArray[composerIndex] = "composer";

                if(poetIndex > -1)
                    changeArray[poetIndex] = "poet";

                if(lyricistIndex > -1)
                    changeArray[lyricistIndex] = "lyricist";

                if(artistIndex > -1)
                    changeArray[artistIndex] = "artist";

                if(tabberIndex > -1)
                    changeArray[tabberIndex] = "tabber";

                for(var i = 0; i < changeArray.length; i++) {
                    if(changeArray[i] == undefined)
                        continue;

                    xmlString = xmlString
                        .replace("<creator type=\"" + changeArray[i] + "\">", "<" + changeArray[i] + ">")
                        .replace("</creator>", "</" + changeArray[i] + ">");    
                }

                return xmlString;
            }

            //FILE POST STUFF
            function postFile(fileText) {
                var request = $.ajax({
                    url: "openFile.php",
                    type: "post",
                    data: { file: fileText}
                });

                // Callback handler that will be called on success
                request.done(function (response, textStatus, jqXHR){
                    OpenScore(response);
                });

                // Callback handler that will be called on failure
                request.fail(function (jqXHR, textStatus, errorThrown){
                    // Log the error to the console
                    console.error(
                        "The following error occurred: "+
                        textStatus, errorThrown
                    );
                });

                // Callback handler that will be called regardless
                // if the request failed or succeeded
                request.always(function () {});
            }

            /*
            window.onresize = function() {
                svgPage.width = window.innerWidth - 400;

                if(score) {
                    score.Organize(window.innerWidth - 420, 300);
                }
            }*/

        </script>
    </body>   
</html>